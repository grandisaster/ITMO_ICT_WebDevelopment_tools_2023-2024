{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u042d\u0442\u043e\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c SQLModel \u0438 JWT \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0438: \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f : \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 : \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u0438. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b : \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438, \u043f\u0435\u0440\u0438\u043e\u0434\u0430\u043c\u0438 \u0438 \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u043c\u0438. \u0421\u0445\u0435\u043c\u044b : \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f SQLModel. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 : \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043e\u0442\u0447\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b: \u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438, \u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u0438 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python. \u042d\u0442\u043e\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f 1 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f 2 \u0422\u0430\u043a\u0436\u0435 \u0432 \u043e\u0442\u0447\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b: \u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438, \u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u0438 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c. \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0422\u0430\u043a\u0436\u0435 \u0432 \u043e\u0442\u0447\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b: \u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438, \u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u0438 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"#1","text":"\u042d\u0442\u043e\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c SQLModel \u0438 JWT \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0438: \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f : \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 : \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u0438. \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b : \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438, \u043f\u0435\u0440\u0438\u043e\u0434\u0430\u043c\u0438 \u0438 \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u043c\u0438. \u0421\u0445\u0435\u043c\u044b : \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f SQLModel. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 : \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043e\u0442\u0447\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b: \u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438, \u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u0438 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"#2","text":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python. \u042d\u0442\u043e\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f 1 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f 2 \u0422\u0430\u043a\u0436\u0435 \u0432 \u043e\u0442\u0447\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b: \u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438, \u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u0438 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"#3","text":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c. \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0422\u0430\u043a\u0436\u0435 \u0432 \u043e\u0442\u0447\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b: \u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438, \u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u0438 \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"LR1/auth/","text":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u041c\u043e\u0434\u0443\u043b\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0432\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c JWT \u0442\u043e\u043a\u0435\u043d\u043e\u0432. \u0424\u0443\u043d\u043a\u0446\u0438\u0438 get_password_hash(password) \u0425\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c bcrypt. verify_password(password, hashed_password) \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u0445\u0435\u0448\u0443. encode_token(user_id) \u0421\u043e\u0437\u0434\u0430\u0435\u0442 JWT \u0442\u043e\u043a\u0435\u043d \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c user_id . decode_token(token) \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 JWT \u0442\u043e\u043a\u0435\u043d \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 user_id . auth_wrapper(auth) \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 user_id . get_current_user(auth, session) \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u043e\u043a\u0435\u043d\u0430. \u0420\u043e\u0443\u0442\u044b POST /registration \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. POST /login \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 JWT \u0442\u043e\u043a\u0435\u043d. GET /me \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435. PATCH /me/change-password \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f"},{"location":"LR1/auth/#_1","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0432\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c JWT \u0442\u043e\u043a\u0435\u043d\u043e\u0432.","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f"},{"location":"LR1/auth/#_2","text":"","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"LR1/auth/#get_password_hashpassword","text":"\u0425\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c bcrypt.","title":"get_password_hash(password)"},{"location":"LR1/auth/#verify_passwordpassword-hashed_password","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u0445\u0435\u0448\u0443.","title":"verify_password(password, hashed_password)"},{"location":"LR1/auth/#encode_tokenuser_id","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 JWT \u0442\u043e\u043a\u0435\u043d \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c user_id .","title":"encode_token(user_id)"},{"location":"LR1/auth/#decode_tokentoken","text":"\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 JWT \u0442\u043e\u043a\u0435\u043d \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 user_id .","title":"decode_token(token)"},{"location":"LR1/auth/#auth_wrapperauth","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 user_id .","title":"auth_wrapper(auth)"},{"location":"LR1/auth/#get_current_userauth-session","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u043e\u043a\u0435\u043d\u0430.","title":"get_current_user(auth, session)"},{"location":"LR1/auth/#_3","text":"","title":"\u0420\u043e\u0443\u0442\u044b"},{"location":"LR1/auth/#post-registration","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.","title":"POST /registration"},{"location":"LR1/auth/#post-login","text":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 JWT \u0442\u043e\u043a\u0435\u043d.","title":"POST /login"},{"location":"LR1/auth/#get-me","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435.","title":"GET /me"},{"location":"LR1/auth/#patch-mechange-password","text":"\u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.","title":"PATCH /me/change-password"},{"location":"LR1/db/","text":"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0439. \u0424\u0443\u043d\u043a\u0446\u0438\u0438 init_db() \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. get_session() \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0436\u0438\u0437\u043d\u0438. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f DB_URL , \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0432 \u0444\u0430\u0439\u043b\u0435 .env : DB_URL = postgresql://postgres:postgres@localhost:5432/finances","title":"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"LR1/db/#_1","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0439.","title":"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"LR1/db/#_2","text":"","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"LR1/db/#init_db","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"init_db()"},{"location":"LR1/db/#get_session","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0436\u0438\u0437\u043d\u0438.","title":"get_session()"},{"location":"LR1/db/#_3","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f DB_URL , \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0432 \u0444\u0430\u0439\u043b\u0435 .env : DB_URL = postgresql://postgres:postgres@localhost:5432/finances","title":"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f"},{"location":"LR1/endpoints/","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u041c\u043e\u0434\u0443\u043b\u044c \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438, \u043f\u0435\u0440\u0438\u043e\u0434\u0430\u043c\u0438, \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u0438 \u0434\u043e\u0445\u043e\u0434\u0430\u043c\u0438. \u0420\u043e\u0443\u0442\u044b \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 POST /category-create \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e. GET /list-categories \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. GET /category/{category_id} \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u043e category_id . PATCH /category/update/{category_id} \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u043e category_id . DELETE /category/delete/{category_id} \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u043f\u043e category_id . \u041f\u0435\u0440\u0438\u043e\u0434\u044b POST /period-create \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434. GET /list-periods \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u0432. GET /period/{period_id} \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u043e period_id . PATCH /period/update/{period_id} \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u043e period_id . DELETE /period/delete/{period_id} \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e period_id . \u0417\u0430\u0442\u0440\u0430\u0442\u044b POST /waste-create \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u0445. GET /list-wastes \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0437\u0430\u0442\u0440\u0430\u0442. GET /waste/{waste_id} \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0435 \u043f\u043e waste_id . PATCH /waste/update/{waste_id} \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0435 \u043f\u043e waste_id . DELETE /waste/delete/{waste_id} \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0435 \u043f\u043e waste_id . \u0414\u043e\u0445\u043e\u0434\u044b POST /income-create \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0434\u043e\u0445\u043e\u0434\u0435. GET /list-incomes \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0434\u043e\u0445\u043e\u0434\u043e\u0432. GET /income/{income_id} \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u043e\u0445\u043e\u0434\u0435 \u043f\u043e income_id . PATCH /income/update/{income_id} \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u043e\u0445\u043e\u0434\u0435 \u043f\u043e income_id . DELETE /income/delete/{income_id} \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0434\u043e\u0445\u043e\u0434\u0435 \u043f\u043e income_id .","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b"},{"location":"LR1/endpoints/#_1","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438, \u043f\u0435\u0440\u0438\u043e\u0434\u0430\u043c\u0438, \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u0438 \u0434\u043e\u0445\u043e\u0434\u0430\u043c\u0438.","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b"},{"location":"LR1/endpoints/#_2","text":"","title":"\u0420\u043e\u0443\u0442\u044b"},{"location":"LR1/endpoints/#_3","text":"","title":"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438"},{"location":"LR1/endpoints/#post-category-create","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e.","title":"POST /category-create"},{"location":"LR1/endpoints/#get-list-categories","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439.","title":"GET /list-categories"},{"location":"LR1/endpoints/#get-categorycategory_id","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u043e category_id .","title":"GET /category/{category_id}"},{"location":"LR1/endpoints/#patch-categoryupdatecategory_id","text":"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u043e category_id .","title":"PATCH /category/update/{category_id}"},{"location":"LR1/endpoints/#delete-categorydeletecategory_id","text":"\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u043f\u043e category_id .","title":"DELETE /category/delete/{category_id}"},{"location":"LR1/endpoints/#_4","text":"","title":"\u041f\u0435\u0440\u0438\u043e\u0434\u044b"},{"location":"LR1/endpoints/#post-period-create","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.","title":"POST /period-create"},{"location":"LR1/endpoints/#get-list-periods","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u0432.","title":"GET /list-periods"},{"location":"LR1/endpoints/#get-periodperiod_id","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u043e period_id .","title":"GET /period/{period_id}"},{"location":"LR1/endpoints/#patch-periodupdateperiod_id","text":"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u043e period_id .","title":"PATCH /period/update/{period_id}"},{"location":"LR1/endpoints/#delete-perioddeleteperiod_id","text":"\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e period_id .","title":"DELETE /period/delete/{period_id}"},{"location":"LR1/endpoints/#_5","text":"","title":"\u0417\u0430\u0442\u0440\u0430\u0442\u044b"},{"location":"LR1/endpoints/#post-waste-create","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u0445.","title":"POST /waste-create"},{"location":"LR1/endpoints/#get-list-wastes","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0437\u0430\u0442\u0440\u0430\u0442.","title":"GET /list-wastes"},{"location":"LR1/endpoints/#get-wastewaste_id","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0435 \u043f\u043e waste_id .","title":"GET /waste/{waste_id}"},{"location":"LR1/endpoints/#patch-wasteupdatewaste_id","text":"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0435 \u043f\u043e waste_id .","title":"PATCH /waste/update/{waste_id}"},{"location":"LR1/endpoints/#delete-wastedeletewaste_id","text":"\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0435 \u043f\u043e waste_id .","title":"DELETE /waste/delete/{waste_id}"},{"location":"LR1/endpoints/#_6","text":"","title":"\u0414\u043e\u0445\u043e\u0434\u044b"},{"location":"LR1/endpoints/#post-income-create","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0434\u043e\u0445\u043e\u0434\u0435.","title":"POST /income-create"},{"location":"LR1/endpoints/#get-list-incomes","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0434\u043e\u0445\u043e\u0434\u043e\u0432.","title":"GET /list-incomes"},{"location":"LR1/endpoints/#get-incomeincome_id","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u043e\u0445\u043e\u0434\u0435 \u043f\u043e income_id .","title":"GET /income/{income_id}"},{"location":"LR1/endpoints/#patch-incomeupdateincome_id","text":"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u043e\u0445\u043e\u0434\u0435 \u043f\u043e income_id .","title":"PATCH /income/update/{income_id}"},{"location":"LR1/endpoints/#delete-incomedeleteincome_id","text":"\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0434\u043e\u0445\u043e\u0434\u0435 \u043f\u043e income_id .","title":"DELETE /income/delete/{income_id}"},{"location":"LR1/leetcode/","text":"Leetcode 3Sum \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0 . Notice that the solution set must not contain duplicate triplets. class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue target = -nums[i] j, k = i + 1, len(nums) - 1 while j < k: if nums[j] + nums[k] == target: result.append([nums[i], nums[j], nums[k]]) j += 1 while j < k and nums[j] == nums[j - 1]: j += 1 elif nums[j] + nums[k] < target: j += 1 else: k -= 1 return result Set Matrix Zeroes \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's. You must do it in place. class Solution: def setZeroes(self, matrix: List[List[int]]) -> None: Do not return anything, modify matrix in-place instead. rows, cols = len(matrix), len(matrix[0]) row_zeroes, col_zeroes = set(), set() for i in range(rows): for j in range(cols): if matrix[i][j] == 0: row_zeroes.add(i) col_zeroes.add(j) for i in range(rows): for j in range(cols): if i in row_zeroes or j in col_zeroes: matrix[i][j] = 0 Group Anagrams \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. class Solution: def groupAnagrams(self, strs: List[str]) -> List[List[str]]: anagrams = {} for s in strs: t = tuple(sorted(s)) if t in anagrams: anagrams[t].append(s) else: anagrams[t] = [s] print(anagrams[t]) return list(anagrams.values()) Longest Substring Without Repeating Characters \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given a string s, find the length of the longest substring without repeating characters. class Solution: def lengthOfLongestSubstring(self, s: str) -> int: start, max_len = 0, 0 used_chars = {} for i in range(len(s)): char = s[i] if char in used_chars and used_chars[char] >= start: start = used_chars[char] + 1 else: max_len = max(max_len, i - start + 1) used_chars[char] = i return max_len Longest Palindromic Substring \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given a string s, return the longest palindromic substring in s. class Solution: def longestPalindrome(self, s: str) -> str: dp = [[False] * len(s) for _ in range(len(s))] max_length, start = 1, 0 for i in range(len(s)): for j in range(i, -1, -1): if s[i] == s[j] and (i - j < 2 or dp[j + 1][i - 1]): dp[j][i] = True if i - j + 1 > max_length: max_length = i - j + 1 start = j return s[start:start + max_length] Evaluate Reverse Polish Notation \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation. Evaluate the expression. Return an integer that represents the value of the expression. Note that: The valid operators are '+', '-', '*', and '/'. Each operand may be an integer or another expression. The division between two integers always truncates toward zero. There will not be any division by zero. The input represents a valid arithmetic expression in a reverse polish notation. The answer and all the intermediate calculations can be represented in a 32-bit integer. class Solution: def evalRPN(self, tokens: List[str]) -> int: stack = [] operations = { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: int(a / b) } for token in tokens: if token in operations: b = stack.pop() a = stack.pop() stack.append(operations[token](a, b)) else: stack.append(int(token)) return stack[0] Majority Element \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an array nums of size n, return the majority element. The majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array. class Solution: def majorityElement(self, nums: List[int]) -> int: max_count = len(nums)//2 max_num = 0 nums_set = set(nums) for num in nums_set: if nums.count(num) > max_count: max_count = nums.count(num) max_num = num return max_num Sort Colors \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function. class Solution: def sortColors(self, nums: List[int]) -> None: Do not return anything, modify nums in-place instead. left, current, right = 0, 0, len(nums) - 1 while current <= right: if nums[current] == 0: nums[left], nums[current], left, current = nums[current], nums[left], left + 1, current + 1 elif nums[current] == 2: nums[current], nums[right], right = nums[right], nums[current], right - 1 else: current += 1 Top K Frequent Elements \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order. class Solution: def topKFrequent(self, nums: List[int], k: int) -> List[int]: count = {} for num in nums: count[num] = count.get(num, 0) + 1 bs = [[] for _ in range(len(nums) + 1)] for num, freq in count.items(): bs[freq].append(num) result = [] for b in reversed(bs): result.extend(b) if len(result) >= k: break return result[:k]","title":"Leetcode"},{"location":"LR1/leetcode/#leetcode","text":"","title":"Leetcode"},{"location":"LR1/leetcode/#3sum","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0 . Notice that the solution set must not contain duplicate triplets. class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue target = -nums[i] j, k = i + 1, len(nums) - 1 while j < k: if nums[j] + nums[k] == target: result.append([nums[i], nums[j], nums[k]]) j += 1 while j < k and nums[j] == nums[j - 1]: j += 1 elif nums[j] + nums[k] < target: j += 1 else: k -= 1 return result","title":"3Sum"},{"location":"LR1/leetcode/#set-matrix-zeroes","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's. You must do it in place. class Solution: def setZeroes(self, matrix: List[List[int]]) -> None: Do not return anything, modify matrix in-place instead. rows, cols = len(matrix), len(matrix[0]) row_zeroes, col_zeroes = set(), set() for i in range(rows): for j in range(cols): if matrix[i][j] == 0: row_zeroes.add(i) col_zeroes.add(j) for i in range(rows): for j in range(cols): if i in row_zeroes or j in col_zeroes: matrix[i][j] = 0","title":"Set Matrix Zeroes"},{"location":"LR1/leetcode/#group-anagrams","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. class Solution: def groupAnagrams(self, strs: List[str]) -> List[List[str]]: anagrams = {} for s in strs: t = tuple(sorted(s)) if t in anagrams: anagrams[t].append(s) else: anagrams[t] = [s] print(anagrams[t]) return list(anagrams.values())","title":"Group Anagrams"},{"location":"LR1/leetcode/#longest-substring-without-repeating-characters","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given a string s, find the length of the longest substring without repeating characters. class Solution: def lengthOfLongestSubstring(self, s: str) -> int: start, max_len = 0, 0 used_chars = {} for i in range(len(s)): char = s[i] if char in used_chars and used_chars[char] >= start: start = used_chars[char] + 1 else: max_len = max(max_len, i - start + 1) used_chars[char] = i return max_len","title":"Longest Substring Without Repeating Characters"},{"location":"LR1/leetcode/#longest-palindromic-substring","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given a string s, return the longest palindromic substring in s. class Solution: def longestPalindrome(self, s: str) -> str: dp = [[False] * len(s) for _ in range(len(s))] max_length, start = 1, 0 for i in range(len(s)): for j in range(i, -1, -1): if s[i] == s[j] and (i - j < 2 or dp[j + 1][i - 1]): dp[j][i] = True if i - j + 1 > max_length: max_length = i - j + 1 start = j return s[start:start + max_length]","title":"Longest Palindromic Substring"},{"location":"LR1/leetcode/#evaluate-reverse-polish-notation","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation. Evaluate the expression. Return an integer that represents the value of the expression. Note that: The valid operators are '+', '-', '*', and '/'. Each operand may be an integer or another expression. The division between two integers always truncates toward zero. There will not be any division by zero. The input represents a valid arithmetic expression in a reverse polish notation. The answer and all the intermediate calculations can be represented in a 32-bit integer. class Solution: def evalRPN(self, tokens: List[str]) -> int: stack = [] operations = { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: int(a / b) } for token in tokens: if token in operations: b = stack.pop() a = stack.pop() stack.append(operations[token](a, b)) else: stack.append(int(token)) return stack[0]","title":"Evaluate Reverse Polish Notation"},{"location":"LR1/leetcode/#majority-element","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an array nums of size n, return the majority element. The majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array. class Solution: def majorityElement(self, nums: List[int]) -> int: max_count = len(nums)//2 max_num = 0 nums_set = set(nums) for num in nums_set: if nums.count(num) > max_count: max_count = nums.count(num) max_num = num return max_num","title":"Majority Element"},{"location":"LR1/leetcode/#sort-colors","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function. class Solution: def sortColors(self, nums: List[int]) -> None: Do not return anything, modify nums in-place instead. left, current, right = 0, 0, len(nums) - 1 while current <= right: if nums[current] == 0: nums[left], nums[current], left, current = nums[current], nums[left], left + 1, current + 1 elif nums[current] == 2: nums[current], nums[right], right = nums[right], nums[current], right - 1 else: current += 1","title":"Sort Colors"},{"location":"LR1/leetcode/#top-k-frequent-elements","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order. class Solution: def topKFrequent(self, nums: List[int], k: int) -> List[int]: count = {} for num in nums: count[num] = count.get(num, 0) + 1 bs = [[] for _ in range(len(nums) + 1)] for num, freq in count.items(): bs[freq].append(num) result = [] for b in reversed(bs): result.extend(b) if len(result) >= k: break return result[:k]","title":"Top K Frequent Elements"},{"location":"LR1/main/","text":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0430\u0439\u043b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 FastAPI: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a. uvicorn: \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. init_db: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. logic_router: \u0420\u043e\u0443\u0442\u044b \u0434\u043b\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439. auth_router: \u0420\u043e\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f ```python app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) app.include_router(auth_router, prefix=\"/api/users\", tags=[\"users\"]) @app.on_event(\"startup\") def on_startup(): init_db()","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"LR1/main/#_1","text":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0430\u0439\u043b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"LR1/main/#_2","text":"","title":"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f"},{"location":"LR1/main/#_3","text":"FastAPI: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a. uvicorn: \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. init_db: \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. logic_router: \u0420\u043e\u0443\u0442\u044b \u0434\u043b\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439. auth_router: \u0420\u043e\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.","title":"\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438"},{"location":"LR1/main/#_4","text":"```python app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) app.include_router(auth_router, prefix=\"/api/users\", tags=[\"users\"]) @app.on_event(\"startup\") def on_startup(): init_db()","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"LR1/schemas/","text":"\u0421\u0445\u0435\u043c\u044b \u041c\u043e\u0434\u0443\u043b\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f SQLModel. \u041c\u043e\u0434\u0435\u043b\u0438 UserBase \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. UserShow \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435. User \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. IncomeDefault \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u0445\u043e\u0434\u0430. Income \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u0445\u043e\u0434\u0430 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. WasteDefault \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u0442\u0440\u0430\u0442. Waste \u041c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u0442\u0440\u0430\u0442 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. PeriodOfCategoryDefault \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. PeriodOfCategory \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. CategoryDefault \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. Category \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. PeriodDefault \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0438\u043e\u0434\u0430. Period \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. ChangePassword \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f.","title":"\u0421\u0445\u0435\u043c\u044b"},{"location":"LR1/schemas/#_1","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f SQLModel.","title":"\u0421\u0445\u0435\u043c\u044b"},{"location":"LR1/schemas/#_2","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"LR1/schemas/#userbase","text":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.","title":"UserBase"},{"location":"LR1/schemas/#usershow","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435.","title":"UserShow"},{"location":"LR1/schemas/#user","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"User"},{"location":"LR1/schemas/#incomedefault","text":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u0445\u043e\u0434\u0430.","title":"IncomeDefault"},{"location":"LR1/schemas/#income","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u0445\u043e\u0434\u0430 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"Income"},{"location":"LR1/schemas/#wastedefault","text":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u0442\u0440\u0430\u0442.","title":"WasteDefault"},{"location":"LR1/schemas/#waste","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u0442\u0440\u0430\u0442 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"Waste"},{"location":"LR1/schemas/#periodofcategorydefault","text":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.","title":"PeriodOfCategoryDefault"},{"location":"LR1/schemas/#periodofcategory","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"PeriodOfCategory"},{"location":"LR1/schemas/#categorydefault","text":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.","title":"CategoryDefault"},{"location":"LR1/schemas/#category","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"Category"},{"location":"LR1/schemas/#perioddefault","text":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0438\u043e\u0434\u0430.","title":"PeriodDefault"},{"location":"LR1/schemas/#period","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"Period"},{"location":"LR1/schemas/#changepassword","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f.","title":"ChangePassword"},{"location":"LR2/leetcode/","text":"Leetcode Add Two Numbers \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. # Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class Solution: def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]: temp = ListNode(0) curr = temp carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 sum_val = val1 + val2 + carry carry = sum_val // 10 curr.next = ListNode(sum_val % 10) curr = curr.next l1 = l1.next if l1 else None l2 = l2.next if l2 else None return temp.next Odd Even Linked List \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list. The first node is considered odd, and the second node is even, and so on. Note that the relative order inside both the even and odd groups should remain as it was in the input. You must solve the problem in O(1) extra space complexity and O(n) time complexity. # Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class Solution: def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]: if not head or not head.next: return head odd = head even = head.next head_even = even while even and even.next: odd.next = even.next odd = odd.next even.next = odd.next even = even.next odd.next = head_even return head Intersection of Two Linked Lists \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null. # Definition for singly-linked list. class ListNode: def __init__(self, x): self.val = x self.next = None class Solution: def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]: if not headA or not headB: return None # linked lists' length len_a = 0 node_a = headA while node_a: len_a += 1 node_a = node_a.next len_b = 0 node_b = headB while node_b: len_b += 1 node_b = node_b.next # longer list is moved by the difference of length diff = abs(len_a - len_b) if len_a > len_b: while diff > 0: headA = headA.next diff -= 1 else: while diff > 0: headB = headB.next diff -= 1 # iterate through LL until find the intersection node while headA and headB: if headA == headB: return headA headA = headA.next headB = headB.next return None Count and Say \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: The count-and-say sequence is a sequence of digit strings defined by the recursive formula: countAndSay(1) = \"1\" countAndSay(n) is the run-length encoding of countAndSay(n - 1). Run-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"3322251\" we replace \"33\" with \"23\", replace \"222\" with \"32\", replace \"5\" with \"15\" and replace \"1\" with \"11\". Thus the compressed string becomes \"23321511\". Given a positive integer n, return the nth element of the count-and-say sequence. class Solution: def countAndSay(self, n: int) -> str: if n == 1: return \"1\" prev_str = self.countAndSay(n - 1) curr_str = \"\" count = 1 for i in range(len(prev_str)): if i == len(prev_str) - 1 or prev_str[i] != prev_str[i + 1]: curr_str += str(count) + prev_str[i] count = 1 else: count += 1 return curr_str","title":"Leetcode"},{"location":"LR2/leetcode/#leetcode","text":"","title":"Leetcode"},{"location":"LR2/leetcode/#add-two-numbers","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. # Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class Solution: def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]: temp = ListNode(0) curr = temp carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 sum_val = val1 + val2 + carry carry = sum_val // 10 curr.next = ListNode(sum_val % 10) curr = curr.next l1 = l1.next if l1 else None l2 = l2.next if l2 else None return temp.next","title":"Add Two Numbers"},{"location":"LR2/leetcode/#odd-even-linked-list","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list. The first node is considered odd, and the second node is even, and so on. Note that the relative order inside both the even and odd groups should remain as it was in the input. You must solve the problem in O(1) extra space complexity and O(n) time complexity. # Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class Solution: def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]: if not head or not head.next: return head odd = head even = head.next head_even = even while even and even.next: odd.next = even.next odd = odd.next even.next = odd.next even = even.next odd.next = head_even return head","title":"Odd Even Linked List"},{"location":"LR2/leetcode/#intersection-of-two-linked-lists","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null. # Definition for singly-linked list. class ListNode: def __init__(self, x): self.val = x self.next = None class Solution: def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]: if not headA or not headB: return None # linked lists' length len_a = 0 node_a = headA while node_a: len_a += 1 node_a = node_a.next len_b = 0 node_b = headB while node_b: len_b += 1 node_b = node_b.next # longer list is moved by the difference of length diff = abs(len_a - len_b) if len_a > len_b: while diff > 0: headA = headA.next diff -= 1 else: while diff > 0: headB = headB.next diff -= 1 # iterate through LL until find the intersection node while headA and headB: if headA == headB: return headA headA = headA.next headB = headB.next return None","title":"Intersection of Two Linked Lists"},{"location":"LR2/leetcode/#count-and-say","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: The count-and-say sequence is a sequence of digit strings defined by the recursive formula: countAndSay(1) = \"1\" countAndSay(n) is the run-length encoding of countAndSay(n - 1). Run-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"3322251\" we replace \"33\" with \"23\", replace \"222\" with \"32\", replace \"5\" with \"15\" and replace \"1\" with \"11\". Thus the compressed string becomes \"23321511\". Given a positive integer n, return the nth element of the count-and-say sequence. class Solution: def countAndSay(self, n: int) -> str: if n == 1: return \"1\" prev_str = self.countAndSay(n - 1) curr_str = \"\" count = 1 for i in range(len(prev_str)): if i == len(prev_str) - 1 or prev_str[i] != prev_str[i + 1]: curr_str += str(count) + prev_str[i] count = 1 else: count += 1 return curr_str","title":"Count and Say"},{"location":"LR2/task1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435: asynic.py import asyncio from time import time async def calculate_sum(args): global RESULT i_from, i_to = args s = sum(range(i_from, i_to)) RESULT += s async def main(n): step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) async with asyncio.TaskGroup() as tg: for chunk in chunks: tg.create_task(calculate_sum(chunk)) if __name__ == \"__main__\": start = time() RESULT = 0 asyncio.run(main(4)) print(\"Result:\", RESULT, \"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.07601785659790039 mltprcs.py from multiprocessing import Pool from time import time def calculate_sum(args): i_from, i_to = args return sum(range(i_from, i_to)) if __name__ == \"__main__\": start = time() n = 4 with Pool(n) as p: step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) RESULT = sum(p.map(calculate_sum, chunks)) print(\"Result:\", RESULT) print(\"Execution time:\", time() - start) ```Result: 499999500000 Execution time: 0.688213586807251 ### thrd.py ```python import threading from time import time lock = threading.Lock() def calculate_sum(i_from, i_to): global RESULT lock.acquire() RESULT += sum(range(i_from, i_to)) lock.release() if __name__ == \"__main__\": start = time() n = 4 RESULT = 0 step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) threads = [threading.Thread(target=calculate_sum, args=chunk) for chunk in chunks] for t in threads: t.start() for t in threads: t.join() print(\"Result:\", RESULT) print(\"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.07540440559387207","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"LR2/task1/#1-threading-multiprocessing-async-python","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python"},{"location":"LR2/task1/#_1","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:"},{"location":"LR2/task1/#asynicpy","text":"import asyncio from time import time async def calculate_sum(args): global RESULT i_from, i_to = args s = sum(range(i_from, i_to)) RESULT += s async def main(n): step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) async with asyncio.TaskGroup() as tg: for chunk in chunks: tg.create_task(calculate_sum(chunk)) if __name__ == \"__main__\": start = time() RESULT = 0 asyncio.run(main(4)) print(\"Result:\", RESULT, \"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.07601785659790039","title":"asynic.py"},{"location":"LR2/task1/#mltprcspy","text":"from multiprocessing import Pool from time import time def calculate_sum(args): i_from, i_to = args return sum(range(i_from, i_to)) if __name__ == \"__main__\": start = time() n = 4 with Pool(n) as p: step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) RESULT = sum(p.map(calculate_sum, chunks)) print(\"Result:\", RESULT) print(\"Execution time:\", time() - start) ```Result: 499999500000 Execution time: 0.688213586807251 ### thrd.py ```python import threading from time import time lock = threading.Lock() def calculate_sum(i_from, i_to): global RESULT lock.acquire() RESULT += sum(range(i_from, i_to)) lock.release() if __name__ == \"__main__\": start = time() n = 4 RESULT = 0 step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) threads = [threading.Thread(target=calculate_sum, args=chunk) for chunk in chunks] for t in threads: t.start() for t in threads: t.join() print(\"Result:\", RESULT) print(\"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.07540440559387207","title":"mltprcs.py"},{"location":"LR2/task2/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 async.py import aiohttp import asyncio import asyncpg from bs4 import BeautifulSoup import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * async def save_to_db(data): conn = await asyncpg.connect(\"postgresql://postgres:1@localhost:5432/web_data\") try: await conn.execute( \"INSERT INTO site (url, title) VALUES ($1, $2)\", data[\"url\"], data[\"title\"] ) finally: await conn.close() async def get_data(url, session): async with session.get(url) as response: return await response.text() async def parse_and_save(url): async with aiohttp.ClientSession() as session: html = await get_data(url, session) soup = BeautifulSoup(html, \"html.parser\") title = soup.find(\"title\").text await save_to_db({\"url\": url, \"title\": title}) async def main(urls): tasks = [] for url in urls: task = asyncio.create_task(parse_and_save(url)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy()) asyncio.run(main(urls)) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Async time: {execution_time}\\n\") mtlprcs.py from multiprocessing import Pool import requests from bs4 import BeautifulSoup import psycopg2 import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, \"html.parser\") title = soup.find(\"title\").text conn = psycopg2.connect(\"postgresql://postgres:1@localhost:5432/web_data\") curs = conn.cursor() curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() curs.close() conn.close() def main(urls): num_process = len(urls) if len(urls) < 4 else 4 pool = Pool(processes=num_process) pool.map(parse_and_save, urls) if __name__ == \"__main__\": start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Multiprocessing time: {execution_time}\\n\") thrd.py from threading import Thread import requests from bs4 import BeautifulSoup import psycopg2 import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, \"html.parser\") title = soup.find(\"title\").text conn = psycopg2.connect(\"postgresql://postgres:1@localhost:5432/web_data\") curs = conn.cursor() curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() curs.close() conn.close() def main(urls): threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Threading time: {execution_time}\\n\") db.py from sqlmodel import SQLModel, create_engine, Field, Session from dotenv import load_dotenv import os load_dotenv() db_url = os.getenv(\"DB_URL\") engine = create_engine(db_url, echo=True) def create_database_session() -> Session: return Session(bind=engine) def init_db() -> None: SQLModel.metadata.create_all(engine) class Site(SQLModel, table=True): id: int = Field(primary_key=True) url: str title: str init_db() urls.py urls = [ 'https://career.habr.com/vacancies?qid=1&type=all', 'https://career.habr.com/vacancies?q=%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D1%82%D0%B8%D0%BA%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85&qid=3&type=all', 'https://career.habr.com/vacancies?q=python%20&qid=3&type=all', ] times.txt Async time: 2.4517574310302734 Multiprocessing time: 3.675524950027466 Threading time: 1.6073400974273682","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"LR2/task2/#2-","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"LR2/task2/#_1","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"LR2/task2/#asyncpy","text":"import aiohttp import asyncio import asyncpg from bs4 import BeautifulSoup import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * async def save_to_db(data): conn = await asyncpg.connect(\"postgresql://postgres:1@localhost:5432/web_data\") try: await conn.execute( \"INSERT INTO site (url, title) VALUES ($1, $2)\", data[\"url\"], data[\"title\"] ) finally: await conn.close() async def get_data(url, session): async with session.get(url) as response: return await response.text() async def parse_and_save(url): async with aiohttp.ClientSession() as session: html = await get_data(url, session) soup = BeautifulSoup(html, \"html.parser\") title = soup.find(\"title\").text await save_to_db({\"url\": url, \"title\": title}) async def main(urls): tasks = [] for url in urls: task = asyncio.create_task(parse_and_save(url)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy()) asyncio.run(main(urls)) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Async time: {execution_time}\\n\")","title":"async.py"},{"location":"LR2/task2/#mtlprcspy","text":"from multiprocessing import Pool import requests from bs4 import BeautifulSoup import psycopg2 import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, \"html.parser\") title = soup.find(\"title\").text conn = psycopg2.connect(\"postgresql://postgres:1@localhost:5432/web_data\") curs = conn.cursor() curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() curs.close() conn.close() def main(urls): num_process = len(urls) if len(urls) < 4 else 4 pool = Pool(processes=num_process) pool.map(parse_and_save, urls) if __name__ == \"__main__\": start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Multiprocessing time: {execution_time}\\n\")","title":"mtlprcs.py"},{"location":"LR2/task2/#thrdpy","text":"from threading import Thread import requests from bs4 import BeautifulSoup import psycopg2 import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, \"html.parser\") title = soup.find(\"title\").text conn = psycopg2.connect(\"postgresql://postgres:1@localhost:5432/web_data\") curs = conn.cursor() curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() curs.close() conn.close() def main(urls): threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Threading time: {execution_time}\\n\")","title":"thrd.py"},{"location":"LR2/task2/#dbpy","text":"from sqlmodel import SQLModel, create_engine, Field, Session from dotenv import load_dotenv import os load_dotenv() db_url = os.getenv(\"DB_URL\") engine = create_engine(db_url, echo=True) def create_database_session() -> Session: return Session(bind=engine) def init_db() -> None: SQLModel.metadata.create_all(engine) class Site(SQLModel, table=True): id: int = Field(primary_key=True) url: str title: str init_db()","title":"db.py"},{"location":"LR2/task2/#urlspy","text":"urls = [ 'https://career.habr.com/vacancies?qid=1&type=all', 'https://career.habr.com/vacancies?q=%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D1%82%D0%B8%D0%BA%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85&qid=3&type=all', 'https://career.habr.com/vacancies?q=python%20&qid=3&type=all', ]","title":"urls.py"},{"location":"LR2/task2/#timestxt","text":"Async time: 2.4517574310302734 Multiprocessing time: 3.675524950027466 Threading time: 1.6073400974273682","title":"times.txt"},{"location":"LR3/leetcode/","text":"Leetcode Pow(x, n) Implement pow(x, n), which calculates x raised to the power n (i.e., x^n). class Solution: def myPow(self, x: float, n: int) -> float: def rec(x, n): if n == 0: return 1 if n == 1: return x if n % 2 == 0: return rec(x * x, n // 2) else: return x * rec(x * x, n // 2) if n < 0: return 1 / rec(x, -n) else: return rec(x, n) Sqrt(x) Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well. You must not use any built-in exponent function or operator. For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python. class Solution: def mySqrt(self, x: int) -> int: left, right = 0, x while left <= right: mid = (left + right) // 2 if mid * mid <= x < (mid + 1) * (mid + 1): return mid elif mid * mid < x: left = mid + 1 else: right = mid - 1 return left Happy Number Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Return true if n is a happy number, and false if not. class Solution: def isHappy(self, n: int) -> bool: s = set() while n != 1 and n not in s: s.add(n) n = sum(int(d) ** 2 for d in str(n)) return n == 1","title":"Leetcode"},{"location":"LR3/leetcode/#leetcode","text":"","title":"Leetcode"},{"location":"LR3/leetcode/#powx-n","text":"Implement pow(x, n), which calculates x raised to the power n (i.e., x^n). class Solution: def myPow(self, x: float, n: int) -> float: def rec(x, n): if n == 0: return 1 if n == 1: return x if n % 2 == 0: return rec(x * x, n // 2) else: return x * rec(x * x, n // 2) if n < 0: return 1 / rec(x, -n) else: return rec(x, n)","title":"Pow(x, n)"},{"location":"LR3/leetcode/#sqrtx","text":"Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well. You must not use any built-in exponent function or operator. For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python. class Solution: def mySqrt(self, x: int) -> int: left, right = 0, x while left <= right: mid = (left + right) // 2 if mid * mid <= x < (mid + 1) * (mid + 1): return mid elif mid * mid < x: left = mid + 1 else: right = mid - 1 return left","title":"Sqrt(x)"},{"location":"LR3/leetcode/#happy-number","text":"Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy. Return true if n is a happy number, and false if not. class Solution: def isHappy(self, n: int) -> bool: s = set() while n != 1 and n not in s: s.add(n) n = sum(int(d) ** 2 for d in str(n)) return n == 1","title":"Happy Number"},{"location":"LR3/task1/","text":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438. from fastapi import FastAPI, BackgroundTasks from parse import parse_and_save from database import get_session from fastapi import Depends, status from schemas import Parce app = FastAPI() @app.post(\"/parse/\") async def parse( url: str, background_tasks: BackgroundTasks, session=Depends(get_session) ): background_tasks.add_task(parse_and_save, url, session) return {\"message\": \"Parse started.\"} @app.get(\"/get-tasks/\") def cases_list(session=Depends(get_session)) -> list[Parce]: return session.query(Parce).all() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Dockerfile \u0427\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430: \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0434\u0432\u0430 Dockerfile, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0437\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043f\u0440\u044f\u043c\u043e\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0432 docker-compose \u0444\u0430\u0439\u043b\u0435: App Dockerfile FROM python:3.9.19-alpine3.20 WORKDIR ./app COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8000 Celery Dockerfile ``` FROM python:3.10-alpine3.19 WORKDIR /run_celery COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8001 ``` \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 docker-compose version: '3.9' services: main_db: container_name: main_db image: postgres restart: always environment: - POSTGRES_PASSWORD=1 - POSTGRES_USER=postgres - POSTGRES_DB=web_data - POSTGRES_PORT=5432 volumes: - postgres_data:/var/lib/postgresql/data/ ports: - \"5432:5432\" networks: - backend app: container_name: app build: context: ./app env_file: .env depends_on: - main_db - redis ports: - \"8000:8000\" command: uvicorn main:app --host 0.0.0.0 --port 8000 networks: - backend restart: always celery_run: container_name: celery_run build: context: ./run_celery env_file: .env depends_on: - main_db - redis ports: - \"8001:8001\" command: uvicorn main:app --host 0.0.0.0 --port 8001 networks: - backend restart: always celery_start: build: context: ./run_celery container_name: celery_start command: celery -A celery_start worker --loglevel=info restart: always depends_on: - redis - app - main_db networks: - backend redis: image: redis ports: - \"6379:6379\" networks: - backend volumes: postgres_data: networks: backend: driver: bridge","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"LR3/task1/#fastapi-docker","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2","title":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker"},{"location":"LR3/task1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438. from fastapi import FastAPI, BackgroundTasks from parse import parse_and_save from database import get_session from fastapi import Depends, status from schemas import Parce app = FastAPI() @app.post(\"/parse/\") async def parse( url: str, background_tasks: BackgroundTasks, session=Depends(get_session) ): background_tasks.add_task(parse_and_save, url, session) return {\"message\": \"Parse started.\"} @app.get(\"/get-tasks/\") def cases_list(session=Depends(get_session)) -> list[Parce]: return session.query(Parce).all()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430"},{"location":"LR3/task1/#dockerfile","text":"\u0427\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430: \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0434\u0432\u0430 Dockerfile, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0437\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043f\u0440\u044f\u043c\u043e\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0432 docker-compose \u0444\u0430\u0439\u043b\u0435:","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Dockerfile"},{"location":"LR3/task1/#app-dockerfile","text":"FROM python:3.9.19-alpine3.20 WORKDIR ./app COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8000","title":"App Dockerfile"},{"location":"LR3/task1/#celery-dockerfile","text":"``` FROM python:3.10-alpine3.19 WORKDIR /run_celery COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8001 ```","title":"Celery Dockerfile"},{"location":"LR3/task1/#docker-compose","text":"version: '3.9' services: main_db: container_name: main_db image: postgres restart: always environment: - POSTGRES_PASSWORD=1 - POSTGRES_USER=postgres - POSTGRES_DB=web_data - POSTGRES_PORT=5432 volumes: - postgres_data:/var/lib/postgresql/data/ ports: - \"5432:5432\" networks: - backend app: container_name: app build: context: ./app env_file: .env depends_on: - main_db - redis ports: - \"8000:8000\" command: uvicorn main:app --host 0.0.0.0 --port 8000 networks: - backend restart: always celery_run: container_name: celery_run build: context: ./run_celery env_file: .env depends_on: - main_db - redis ports: - \"8001:8001\" command: uvicorn main:app --host 0.0.0.0 --port 8001 networks: - backend restart: always celery_start: build: context: ./run_celery container_name: celery_start command: celery -A celery_start worker --loglevel=info restart: always depends_on: - redis - app - main_db networks: - backend redis: image: redis ports: - \"6379:6379\" networks: - backend volumes: postgres_data: networks: backend: driver: bridge","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 docker-compose"},{"location":"LR3/task2/","text":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. @app.post(\"/parse/\") async def parse( url: str, background_tasks: BackgroundTasks, session=Depends(get_session) ): background_tasks.add_task(parse_and_save, url, session) return {\"message\": \"Parsing started.\"}","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"LR3/task2/#fastapi","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. @app.post(\"/parse/\") async def parse( url: str, background_tasks: BackgroundTasks, session=Depends(get_session) ): background_tasks.add_task(parse_and_save, url, session) return {\"message\": \"Parsing started.\"}","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI"},{"location":"LR3/task3/","text":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Celery \u0432 FastAPI from celery import Celery celery_app = Celery( \"worker\", broker=\"redis://redis:6379/0\", backend=\"redis://redis:6379/0\", ) celery_app.conf.update( task_routes={ \"parse.parse_and_save\": \"main-queue\", }, ) \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0441 Celery @celery_app.task def parse_and_save(url, session): response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") title = soup.title.string if soup.title else \"No title\" new_article = Parse(url=url, article_title=title) session.add(new_article) session.commit()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"LR3/task3/#fastapi","text":"","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c"},{"location":"LR3/task3/#celery-fastapi","text":"from celery import Celery celery_app = Celery( \"worker\", broker=\"redis://redis:6379/0\", backend=\"redis://redis:6379/0\", ) celery_app.conf.update( task_routes={ \"parse.parse_and_save\": \"main-queue\", }, )","title":"Celery \u0432 FastAPI"},{"location":"LR3/task3/#celery","text":"@celery_app.task def parse_and_save(url, session): response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") title = soup.title.string if soup.title else \"No title\" new_article = Parse(url=url, article_title=title) session.add(new_article) session.commit()","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0441 Celery"}]}